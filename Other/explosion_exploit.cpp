#include <bits/stdc++.h>

using namespace std;

#define llong long long int

const double EPS = 1e-9;

int n, m, d, sum = 0;
unordered_map<int, double> memo;

int get_id(vector<int> healths) {
    sort(healths.begin(), healths.begin() + n);
    sort(healths.begin() + n, healths.end());

    int id = 0;
    for (int i = 0; i < n + m; i++)
        id = (7 * id + healths[i]);

    return id;
}

double prob(vector<int> &healths) {
    int sn = 0, sm = 0, zeros = 0;
    for (int i = 0; i < n + m; i++) {
        if (i < n) sn += healths[i];
        else sm += healths[i];

        if (!healths[i]) zeros++;
    }

    if (!sm) return 1.0;
    if (sum - sn - sm >= d) return !sm;

    int id = get_id(healths);
    if (memo.count(id))
        return memo[id];

    double ans = 0.0;
    for (int i = 0; i < n + m; i++) {
        if (healths[i]) {
            healths[i]--;
            ans += prob(healths);
            healths[i]++;
        }
    }

    ans *= 1.0 / (n + m - zeros);
    return memo[id] = ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cout << setprecision(8) << fixed;

    cin >> n >> m >> d;

    vector<int> healths(n + m);
    for (int i = 0; i < n; i++) {
        cin >> healths[i];
        sum += healths[i];
    }

    for (int i = 0; i < m; i++) {
        cin >> healths[n + i];
        sum += healths[n + i];
    }

    sort(healths.begin(), healths.begin() + n);
    sort(healths.begin() + n, healths.end());

    double ans = d >= sum ? 1.0 : prob(healths);
    cout << ans << "\n";
}